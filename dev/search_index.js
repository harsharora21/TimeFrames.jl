var documenterSearchIndex = {"docs":
[{"location":"api/","page":"API reference","title":"API reference","text":"CurrentModule = TSx","category":"page"},{"location":"api/#TSx-API-reference","page":"API reference","title":"TSx API reference","text":"","category":"section"},{"location":"api/","page":"API reference","title":"API reference","text":"API reference of TSx.","category":"page"},{"location":"api/","page":"API reference","title":"API reference","text":"","category":"page"},{"location":"api/","page":"API reference","title":"API reference","text":"Modules = [TSx]","category":"page"},{"location":"api/#Base.Matrix-Tuple{TS}","page":"API reference","title":"Base.Matrix","text":"Conversion of non-Index data to Matrix\n\nData in non-index columns of a TS object can be converted into a Matrix type for further numerical analysis using the Matrix() constructor.\n\nExamples\n\njulia> using Random;\njulia> random(x) = rand(MersenneTwister(123), x);\njulia> ts = TS([random(10) random(10)])\njulia> show(ts)\n(10 x 2) TS with Int64 Index\n\n Index  x1         x2\n Int64  Float64    Float64\n─────────────────────────────\n     1  0.768448   0.768448\n     2  0.940515   0.940515\n     3  0.673959   0.673959\n     4  0.395453   0.395453\n     5  0.313244   0.313244\n     6  0.662555   0.662555\n     7  0.586022   0.586022\n     8  0.0521332  0.0521332\n     9  0.26864    0.26864\n    10  0.108871   0.108871\n\njulia> Matrix(ts)\n10×2 Matrix{Float64}:\n 0.768448   0.768448\n 0.940515   0.940515\n 0.673959   0.673959\n 0.395453   0.395453\n 0.313244   0.313244\n 0.662555   0.662555\n 0.586022   0.586022\n 0.0521332  0.0521332\n 0.26864    0.26864\n 0.108871   0.108871\n\n\n\n\n\n","category":"method"},{"location":"api/#TSx.TS","page":"API reference","title":"TSx.TS","text":"struct TS\n  coredata :: DataFrame\nend\n\n::TS - A type to hold ordered data with an index.\n\nA TS object is essentially a DataFrame with a specific column marked as an index. The input DataFrame is sorted during construction and is stored under the property coredata. The index is stored in the Index column of coredata.\n\nPermitted data inputs to the constructors are DataFrame, Vector, and 2-dimensional Array. If an index is already not present in the constructor then a sequential integer index is created automatically.\n\nTS(coredata::DataFrame): Here, the constructor looks for a column named Index in coredata as the index column, if this is not found then the first column of coredata is made the index by default. If coredata only has a single column then a new sequential index is generated.\n\nSince TS.coredata is a DataFrame it can be operated upon independently using methods provided by the DataFrames package (ex. transform, combine, etc.).\n\nConstructors\n\nTS(coredata::DataFrame, index::Union{String, Symbol, Int})\nTS(coredata::DataFrame, index::AbstractVector{T}) where {T<:Union{Int, TimeType}}\nTS(coredata::DataFrame)\nTS(coredata::DataFrame, index::UnitRange{Int})\nTS(coredata::AbstractVector{T}, index::AbstractVector{V}) where {T, V}\nTS(coredata::AbstractVector{T}) where {T}\nTS(coredata::AbstractArray{T,2}) where {T}\nTS(coredata::AbstractArray{T,2}, index::AbstractVector{V}) where {T, V}\n\nExamples\n\njulia> using Random;\njulia> random(x) = rand(MersenneTwister(123), x);\n\njulia> df = DataFrame(x1 = random(10))\n10×1 DataFrame\n Row │ x1\n     │ Float64\n─────┼───────────\n   1 │ 0.768448\n   2 │ 0.940515\n   3 │ 0.673959\n   4 │ 0.395453\n   5 │ 0.313244\n   6 │ 0.662555\n   7 │ 0.586022\n   8 │ 0.0521332\n   9 │ 0.26864\n  10 │ 0.108871\n\njulia> ts = TS(df)   # generates index\n(10 x 1) TS with Int64 Index\n\n Index  x1\n Int64  Float64\n──────────────────\n     1  0.768448\n     2  0.940515\n     3  0.673959\n     4  0.395453\n     5  0.313244\n     6  0.662555\n     7  0.586022\n     8  0.0521332\n     9  0.26864\n    10  0.108871\n\n# ts.coredata is a DataFrame\njulia> combine(ts.coredata, :x1 => Statistics.mean, DataFrames.nrow)\n1×2 DataFrame\n Row │ x1_mean  nrow\n     │ Float64  Int64\n─────┼────────────────\n   1 │ 0.49898    418\n\njulia> df = DataFrame(ind = [1, 2, 3], x1 = random(3))\n3×2 DataFrame\n Row │ ind    x1\n     │ Int64  Float64\n─────┼─────────────────\n   1 │     1  0.768448\n   2 │     2  0.940515\n   3 │     3  0.673959\n\njulia> ts = TS(df, 1)        # the first column is index\n(3 x 1) TS with Int64 Index\n\n Index  x1\n Int64  Float64\n─────────────────\n     1  0.768448\n     2  0.940515\n     3  0.673959\n\njulia> df = DataFrame(x1 = random(3), x2 = random(3), Index = [1, 2, 3]);\n3×3 DataFrame\n Row │ x1        x2        Index\n     │ Float64   Float64   Int64\n─────┼───────────────────────────\n   1 │ 0.768448  0.768448      1\n   2 │ 0.940515  0.940515      2\n   3 │ 0.673959  0.673959      3\n\njulia> ts = TS(df)   # uses existing `Index` column\n(3 x 2) TS with Int64 Index\n\n Index  x1        x2\n Int64  Float64   Float64\n───────────────────────────\n     1  0.768448  0.768448\n     2  0.940515  0.940515\n     3  0.673959  0.673959\n\njulia> dates = collect(Date(2017,1,1):Day(1):Date(2017,1,10));\n\njulia> df = DataFrame(dates = dates, x1 = random(10))\n10×2 DataFrame\n Row │ dates       x1\n     │ Date        Float64\n─────┼───────────────────────\n   1 │ 2017-01-01  0.768448\n   2 │ 2017-01-02  0.940515\n   3 │ 2017-01-03  0.673959\n   4 │ 2017-01-04  0.395453\n   5 │ 2017-01-05  0.313244\n   6 │ 2017-01-06  0.662555\n   7 │ 2017-01-07  0.586022\n   8 │ 2017-01-08  0.0521332\n   9 │ 2017-01-09  0.26864\n  10 │ 2017-01-10  0.108871\n\njulia> ts = TS(df, :dates)\n(10 x 1) TS with Date Index\n\n Index       x1\n Date        Float64\n───────────────────────\n 2017-01-01  0.768448\n 2017-01-02  0.940515\n 2017-01-03  0.673959\n 2017-01-04  0.395453\n 2017-01-05  0.313244\n 2017-01-06  0.662555\n 2017-01-07  0.586022\n 2017-01-08  0.0521332\n 2017-01-09  0.26864\n 2017-01-10  0.108871\n\n\njulia> ts = TS(DataFrame(x1=random(10)), dates);\n\n\njulia> ts = TS(random(10))\n(10 x 1) TS with Int64 Index\n\n Index  x1\n Int64  Float64\n──────────────────\n     1  0.768448\n     2  0.940515\n     3  0.673959\n     4  0.395453\n     5  0.313244\n     6  0.662555\n     7  0.586022\n     8  0.0521332\n     9  0.26864\n    10  0.108871\n\njulia> ts = TS(random(10), dates);\n\n\njulia> ts = TS([random(10) random(10)], dates) # matrix object\n(10 x 2) TS with Date Index\n\n Index       x1         x2\n Date        Float64    Float64\n──────────────────────────────────\n 2017-01-01  0.768448   0.768448\n 2017-01-02  0.940515   0.940515\n 2017-01-03  0.673959   0.673959\n 2017-01-04  0.395453   0.395453\n 2017-01-05  0.313244   0.313244\n 2017-01-06  0.662555   0.662555\n 2017-01-07  0.586022   0.586022\n 2017-01-08  0.0521332  0.0521332\n 2017-01-09  0.26864    0.26864\n 2017-01-10  0.108871   0.108871\n\n\n\n\n\n\n","category":"type"},{"location":"api/#Base.first-Tuple{TS}","page":"API reference","title":"Base.first","text":"First Row\n\nfirst(ts::TS)\n\nReturns the first row of ts as a TS object.\n\nExamples\n\njulia> first(TS(1:10))\n(10 x 1) TS with Dates.Date Index\n\n Index       x1\n Date        Float64\n───────────────────────\n 2022-02-01  0.768448\n\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.join-Tuple{TS, TS}","page":"API reference","title":"Base.join","text":"Joins/Column-binding\n\nTS objects can be combined together column-wise using Index as the column key. There are four kinds of column-binding operations possible as of now. Each join operation works by performing a Set operation on the Index column and then merging the datasets based on the output from the Set operation. Each operation changes column names in the final object automatically if the operation encounters duplicate column names amongst the TS objects.\n\nThe following join types are supported:\n\njoin(ts1::TS, ts2::TS, ::Type{JoinInner}) and join(ts1::TS, ts2::TS, ::Type{JoinBoth})\n\na.k.a. inner join, takes the intersection of the indexes of ts1 and ts2, and then merges the columns of both the objects. The resulting object will only contain rows which are present in both the objects' indexes. The function will rename columns in the final object if they had same names in the TS objects.\n\njoin(ts1::TS, ts2::TS, ::Type{JoinOuter}) and join(ts1::TS, ts2::TS, ::Type{JoinAll}):\n\na.k.a. outer join, takes the union of the indexes of ts1 and ts2 before merging the other columns of input objects. The output will contain rows which are present in all the input objects while inserting missing values where a row was not present in any of the objects. This is the default behaviour if no JoinType object is provided.\n\njoin(ts1::TS, ts2::TS, ::Type{JoinLeft}):\n\nLeft join takes the index values which are present in the left object ts1 and finds matching index values in the right object ts2. The resulting object includes all the rows from the left object, the column values from the left object, and the values associated with matching index rows on the right. The operation inserts missing values where in the unmatched rows of the right object.\n\njoin(ts1::TS, ts2::TS, ::Type{JoinRight})\n\nRight join, similar to left join but works in the opposite direction. The final object contains all the rows from the right object while inserting missing values in rows missing from the left object.\n\nThe default behaviour is to assume JoinAll if no JoinType object is provided to the join method.\n\ncbind is an alias for join method.\n\nExamples\n\njulia> using Random;\n\njulia> random(x) = rand(MersenneTwister(123), x);\n\njulia> dates = collect(Date(2017,1,1):Day(1):Date(2017,1,10));\n\njulia> ts1 = TS(random(length(dates)), dates)\njulia> show(ts1)\n(10 x 1) TS with Dates.Date Index\n\n Index       x1\n Date        Float64\n───────────────────────\n 2017-01-01  0.768448\n 2017-01-02  0.940515\n 2017-01-03  0.673959\n 2017-01-04  0.395453\n 2017-01-05  0.313244\n 2017-01-06  0.662555\n 2017-01-07  0.586022\n 2017-01-08  0.0521332\n 2017-01-09  0.26864\n 2017-01-10  0.108871\n\njulia> dates = collect(Date(2017,1,1):Day(1):Date(2017,1,30));\n\njulia> ts2 = TS(random(length(dates)), dates);\njulia> show(ts2)\n(30 x 1) TS with Dates.Date Index\n\n Index       x1\n Date        Float64\n───────────────────────\n 2017-01-01  0.768448\n 2017-01-02  0.940515\n 2017-01-03  0.673959\n 2017-01-04  0.395453\n 2017-01-05  0.313244\n 2017-01-06  0.662555\n 2017-01-07  0.586022\n 2017-01-08  0.0521332\n     ⋮           ⋮\n 2017-01-23  0.281066\n 2017-01-24  0.792931\n 2017-01-25  0.20923\n 2017-01-26  0.918165\n 2017-01-27  0.614255\n 2017-01-28  0.802665\n 2017-01-29  0.555668\n 2017-01-30  0.940782\n        14 rows omitted\n\n\n# join on all index values\n# equivalent to `join(ts1, ts2, JoinAll)` call\njulia> join(ts1, ts2)\n(30 x 2) TS with Date Index\n\n Index       x1               x1_1\n Date        Float64?         Float64?\n────────────────────────────────────────\n 2017-01-01        0.768448   0.768448\n 2017-01-02        0.940515   0.940515\n 2017-01-03        0.673959   0.673959\n 2017-01-04        0.395453   0.395453\n 2017-01-05        0.313244   0.313244\n 2017-01-06        0.662555   0.662555\n 2017-01-07        0.586022   0.586022\n 2017-01-08        0.0521332  0.0521332\n 2017-01-09        0.26864    0.26864\n 2017-01-10        0.108871   0.108871\n     ⋮              ⋮             ⋮\n 2017-01-22  missing          0.291978\n 2017-01-23  missing          0.281066\n 2017-01-24  missing          0.792931\n 2017-01-25  missing          0.20923\n 2017-01-26  missing          0.918165\n 2017-01-27  missing          0.614255\n 2017-01-28  missing          0.802665\n 2017-01-29  missing          0.555668\n 2017-01-30  missing          0.940782\n                         11 rows omitted\n\n# alias to `join()`\njulia> cbind(ts1, ts2);\n\n# join only the common index values\njulia> join(ts1, ts2, JoinBoth)\n(10 x 2) TS with Date Index\n\n Index       x1         x1_1\n Date        Float64    Float64\n──────────────────────────────────\n 2017-01-01  0.768448   0.768448\n 2017-01-02  0.940515   0.940515\n 2017-01-03  0.673959   0.673959\n 2017-01-04  0.395453   0.395453\n 2017-01-05  0.313244   0.313244\n 2017-01-06  0.662555   0.662555\n 2017-01-07  0.586022   0.586022\n 2017-01-08  0.0521332  0.0521332\n 2017-01-09  0.26864    0.26864\n 2017-01-10  0.108871   0.108871\n\n\n# keep index values of `ts1`\njulia> join(ts1, ts2, JoinLeft)\n(10 x 2) TS with Date Index\n\n Index       x1         x1_1\n Date        Float64    Float64?\n──────────────────────────────────\n 2017-01-01  0.768448   0.768448\n 2017-01-02  0.940515   0.940515\n 2017-01-03  0.673959   0.673959\n 2017-01-04  0.395453   0.395453\n 2017-01-05  0.313244   0.313244\n 2017-01-06  0.662555   0.662555\n 2017-01-07  0.586022   0.586022\n 2017-01-08  0.0521332  0.0521332\n 2017-01-09  0.26864    0.26864\n 2017-01-10  0.108871   0.108871\n\n\n# keep index values of `ts2`\njulia> join(ts1, ts2, JoinRight)\n(30 x 2) TS with Date Index\n\n Index       x1               x1_1\n Date        Float64?         Float64\n────────────────────────────────────────\n 2017-01-01        0.768448   0.768448\n 2017-01-02        0.940515   0.940515\n 2017-01-03        0.673959   0.673959\n 2017-01-04        0.395453   0.395453\n 2017-01-05        0.313244   0.313244\n 2017-01-06        0.662555   0.662555\n 2017-01-07        0.586022   0.586022\n 2017-01-08        0.0521332  0.0521332\n 2017-01-09        0.26864    0.26864\n 2017-01-10        0.108871   0.108871\n     ⋮              ⋮             ⋮\n 2017-01-22  missing          0.291978\n 2017-01-23  missing          0.281066\n 2017-01-24  missing          0.792931\n 2017-01-25  missing          0.20923\n 2017-01-26  missing          0.918165\n 2017-01-27  missing          0.614255\n 2017-01-28  missing          0.802665\n 2017-01-29  missing          0.555668\n 2017-01-30  missing          0.940782\n                         11 rows omitted\n\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.log-Tuple{TS}","page":"API reference","title":"Base.log","text":"Log Function\n\nlog(ts::TS, complex::Bool = false)\n\nThis method computes the log value of non-index columns in the TS object.\n\nExamples\n\njulia> using Random\njulia> random(x) = rand(MersenneTwister(123), x...);\njulia> ts = TS(random(([1, 2, 3, 4, missing], 10)))\njulia> show(ts)\n(10 x 1) TS with Int64 Index\n\n Index  x1\n Int64  Int64?\n────────────────\n     1  missing\n     2        2\n     3        2\n     4        3\n     5        4\n     6        3\n     7        3\n     8  missing\n     9        2\n    10        3\n\njulia> log(ts)\n(10 x 1) TS with Int64 Index\n\n Index  x1_log\n Int64  Float64?\n───────────────────────\n     1  missing\n     2        0.693147\n     3        0.693147\n     4        1.09861\n     5        1.38629\n     6        1.09861\n     7        1.09861\n     8  missing\n     9        0.693147\n    10        1.09861\n\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.size-Tuple{TS}","page":"API reference","title":"Base.size","text":"Size methods\n\nsize(ts::TS)\n\nReturn the number of rows and columns of ts as a tuple.\n\nExamples\n\njulia> TSx.size(TS([collect(1:100) collect(1:100) collect(1:100)]))\n(100, 3)\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.vcat-Tuple{TS, TS}","page":"API reference","title":"Base.vcat","text":"Row-merging (vcat/rbind)\n\nvcat(ts1::TS, ts2::TS; colmerge::Symbol=:union)\n\nConcatenate rows of two TS objects, append ts2 to ts1.\n\nThe colmerge keyword argument specifies the column merge strategy. The value of colmerge is directly passed to cols argument of DataFrames.vcat.\n\nCurrently, DataFrames.vcat supports four types of column-merge strategies:\n\n:setequal: only merge if both objects have same column names, use the order of columns in ts1.\n:orderequal: only merge if both objects have same column names and columns are in the same order.\n:intersect: only merge the columns which are common to both objects, ignore the rest.\n:union: merge even if columns differ, the resulting object has all the columns filled with missing, if necessary.\n\nExamples\n\njulia> using Random;\n\njulia> random(x) = rand(MersenneTwister(123), x);\n\njulia> dates1 = collect(Date(2017,1,1):Day(1):Date(2017,1,10));\n\njulia> dates2 = collect(Date(2017,1,11):Day(1):Date(2017,1,30));\n\njulia> ts1 = TS([randn(length(dates1)) randn(length(dates1))], dates1)\njulia> show(ts1)\n(10 x 1) TS with Dates.Date Index\n\n Index       x1\n Date        Float64\n────────────────────────\n 2017-01-01  -0.420348\n 2017-01-02   0.109363\n 2017-01-03  -0.0702014\n 2017-01-04   0.165618\n 2017-01-05  -0.0556799\n 2017-01-06  -0.147801\n 2017-01-07  -2.50723\n 2017-01-08  -0.099783\n 2017-01-09   0.177526\n 2017-01-10  -1.08461\n\njulia> df = DataFrame(x1 = randn(length(dates2)), y1 = randn(length(dates2)))\njulia> ts2 = TS(df, dates2)\njulia> show(ts2)\n(20 x 1) TS with Dates.Date Index\n\n Index       x1\n Date        Float64\n────────────────────────\n 2017-01-11   2.15087\n 2017-01-12   0.9203\n 2017-01-13  -0.0879142\n 2017-01-14  -0.930109\n 2017-01-15   0.061117\n 2017-01-16   0.0434627\n 2017-01-17   0.0834733\n 2017-01-18  -1.52281\n     ⋮           ⋮\n 2017-01-23  -0.756143\n 2017-01-24   0.491623\n 2017-01-25   0.549672\n 2017-01-26   0.570689\n 2017-01-27  -0.380011\n 2017-01-28  -2.09965\n 2017-01-29   1.37289\n 2017-01-30  -0.462384\n          4 rows omitted\n\n\njulia> vcat(ts1, ts2)\n(30 x 3) TS with Date Index\n\n Index       x1          x2              y1\n Date        Float64     Float64?        Float64?\n─────────────────────────────────────────────────────────\n 2017-01-01  -0.524798        -1.4949    missing\n 2017-01-02  -0.719611        -1.1278    missing\n 2017-01-03   0.0926092        1.19778   missing\n 2017-01-04   0.236237         1.39115   missing\n 2017-01-05   0.369588         1.21792   missing\n 2017-01-06   1.65287         -0.930058  missing\n 2017-01-07   0.761301         0.23794   missing\n 2017-01-08  -0.571046        -0.480486  missing\n 2017-01-09  -2.01905         -0.46391   missing\n 2017-01-10   0.193942        -1.01471   missing\n 2017-01-11   0.239041   missing              -0.473429\n 2017-01-12   0.286036   missing              -0.90377\n 2017-01-13   0.683429   missing              -0.128489\n 2017-01-14  -1.51442    missing              -2.39843\n 2017-01-15  -0.581341   missing              -0.12265\n 2017-01-16   1.07059    missing              -0.916064\n 2017-01-17   0.859396   missing               0.0162969\n 2017-01-18  -1.93127    missing               2.11127\n 2017-01-19   0.529477   missing               0.636964\n 2017-01-20   0.817429   missing              -0.34038\n 2017-01-21  -0.682296   missing              -0.971262\n 2017-01-22   1.36232    missing              -0.236323\n 2017-01-23   0.143188   missing              -0.501722\n 2017-01-24   0.621845   missing              -1.20016\n 2017-01-25   0.076199   missing              -1.36616\n 2017-01-26   0.379672   missing              -0.555395\n 2017-01-27   0.494473   missing               1.05389\n 2017-01-28   0.278259   missing              -0.358983\n 2017-01-29   0.0231765  missing               0.712526\n 2017-01-30   0.516704   missing               0.216855\n\njulia> vcat(ts1, ts2; colmerge=:intersect)\n(30 x 1) TS with Date Index\n\n Index       x1\n Date        Float64\n────────────────────────\n 2017-01-01  -0.524798\n 2017-01-02  -0.719611\n 2017-01-03   0.0926092\n 2017-01-04   0.236237\n 2017-01-05   0.369588\n 2017-01-06   1.65287\n 2017-01-07   0.761301\n 2017-01-08  -0.571046\n 2017-01-09  -2.01905\n 2017-01-10   0.193942\n 2017-01-11   0.239041\n 2017-01-12   0.286036\n 2017-01-13   0.683429\n 2017-01-14  -1.51442\n 2017-01-15  -0.581341\n 2017-01-16   1.07059\n 2017-01-17   0.859396\n 2017-01-18  -1.93127\n 2017-01-19   0.529477\n 2017-01-20   0.817429\n 2017-01-21  -0.682296\n 2017-01-22   1.36232\n 2017-01-23   0.143188\n 2017-01-24   0.621845\n 2017-01-25   0.076199\n 2017-01-26   0.379672\n 2017-01-27   0.494473\n 2017-01-28   0.278259\n 2017-01-29   0.0231765\n 2017-01-30   0.516704\n\n\n\n\n\n\n","category":"method"},{"location":"api/#RecipesBase.apply_recipe","page":"API reference","title":"RecipesBase.apply_recipe","text":"Plotting\n\nplot(ts::TS, cols::Vector{Int} = collect(1:TSx.ncol(ts)))\nplot(ts::TS, cols::Vector{T}) where {T<:Union{String, Symbol}}\nplot(ts::TS, cols::T) where {T<:Union{Int, String, Symbol}}\n\nPlots a TS object with the index on the x-axis and selected cols on the y-axis. By default, plot all the columns. Columns can be selected using Int indexes, String(s), or Symbol(s).\n\nExample\n\njulia> using Random;\njulia> random(x) = rand(MersenneTwister(123), x);\njulia> dates = Date(\"2022-01-01\"):Month(1):Date(\"2022-01-01\")+Month(11);\n\njulia> df = DataFrame(Index = dates,\n        val1 = random(12),\n        val2 = random(12),\n        val3 = random(12));\n\njulia> ts = TS(df)\njulia> show(ts)\n(12 x 3) TS with Dates.Date Index\n\n Index       val1        val2        val3\n Date        Float64     Float64     Float64\n────────────────────────────────────────────────\n 2022-01-01  -0.319954    0.974594   -0.552977\n 2022-02-01  -0.0386735  -0.171675    0.779539\n 2022-03-01   1.67678    -1.75251     0.820462\n 2022-04-01   1.69702    -0.0130037   1.0507\n 2022-05-01   0.992128    0.76957    -1.28008\n 2022-06-01  -0.315461   -0.543976   -0.117256\n 2022-07-01  -1.18952    -1.12867    -0.0829082\n 2022-08-01   0.159595    0.450044   -0.231828\n 2022-09-01   0.501436    0.265327   -0.948532\n 2022-10-01  -2.10516    -1.11489     0.285194\n 2022-11-01  -0.781082   -1.20202    -0.639953\n 2022-12-01  -0.169184    1.34879     1.33361\n\n\njulia> using Plots\n\njulia> # plot(ts)\n\n# plot first 6 rows with selected columns\njulia> # plot(ts[1:6], [:val1, :val3]);\n\n# plot columns 1 and 2 on a specified window size\njulia> # plot(ts, [1, 2], size=(600, 400));\n\n\n\n\n\n","category":"function"},{"location":"api/#TSx.apply-Union{Tuple{V}, Tuple{T}, Tuple{TS, Union{Type{T}, T}, V}, Tuple{TS, Union{Type{T}, T}, V, Function}} where {T<:Union{Dates.DatePeriod, Dates.TimePeriod}, V<:Function}","page":"API reference","title":"TSx.apply","text":"Apply/Period conversion\n\napply(ts::TS,\n      period::Union{T,Type{T}},\n      fun::V,\n      index_at::Function=first;\n      renamecols::Bool=true)\n     where {T <: Union{DatePeriod,TimePeriod}, V <: Function}\n\nApply fun to ts object based on period and return correctly indexed rows. This method is used for doing aggregation over a time period or to convert ts into an object of lower frequency (ex. from daily series to monthly).\n\nperiod is any of Period types in the Dates module. Conversion from lower to a higher frequency will throw an error as interpolation isn't currently handled by this method.\n\nBy default, the method uses the first value of the index within the period to index the resulting aggregated object. This behaviour can be controlled by index_at argument which can take first or last as an input.\n\nKeyword arguments\n\nrenamecols::Bool=true: whether to rename column names in the  resulting object. If false, the column name is automatically  generated based on the name of fun otherwise existing column  names are used.\n\nExamples\n\njulia> using Random, Statistics;\njulia> random(x) = rand(MersenneTwister(123), x);\njulia> dates = collect(Date(2017,1,1):Day(1):Date(2018,3,10));\n\njulia> ts = TS(random(length(dates)), dates)\njulia> show(ts[1:10])\n(10 x 1) TS with Date Index\n\n Index       x1\n Date        Float64\n───────────────────────\n 2017-01-01  0.768448\n 2017-01-02  0.940515\n 2017-01-03  0.673959\n 2017-01-04  0.395453\n 2017-01-05  0.313244\n 2017-01-06  0.662555\n 2017-01-07  0.586022\n 2017-01-08  0.0521332\n 2017-01-09  0.26864\n 2017-01-10  0.108871\n\njulia> apply(ts, Month, first)\n(15 x 1) TS with Date Index\n\n Index       x1_first\n Date        Float64\n───────────────────────\n 2017-01-01  0.768448\n 2017-02-01  0.790201\n 2017-03-01  0.467219\n 2017-04-01  0.783473\n 2017-05-01  0.651354\n 2017-06-01  0.373346\n 2017-07-01  0.83296\n 2017-08-01  0.132716\n 2017-09-01  0.27899\n 2017-10-01  0.995414\n 2017-11-01  0.214132\n 2017-12-01  0.832917\n 2018-01-01  0.0409471\n 2018-02-01  0.720163\n 2018-03-01  0.87459\n\n# alternate months\njulia> apply(ts, Month(2), first)\n(8 x 1) TS with Date Index\n\n Index       x1_first\n Date        Float64\n───────────────────────\n 2017-01-01  0.768448\n 2017-03-01  0.467219\n 2017-05-01  0.651354\n 2017-07-01  0.83296\n 2017-09-01  0.27899\n 2017-11-01  0.214132\n 2018-01-01  0.0409471\n 2018-03-01  0.87459\n\n\njulia> ts_weekly = apply(ts, Week, Statistics.std) # weekly standard deviation\njulia> show(ts_weekly[1:10])\n(10 x 1) TS with Date Index\n\n Index       x1_std\n Date        Float64\n────────────────────────\n 2017-01-01  NaN\n 2017-01-02    0.28935\n 2017-01-09    0.270842\n 2017-01-16    0.170197\n 2017-01-23    0.269573\n 2017-01-30    0.326687\n 2017-02-06    0.279935\n 2017-02-13    0.319216\n 2017-02-20    0.272058\n 2017-02-27    0.23651\n\n\njulia> ts_weekly = apply(ts, Week, Statistics.std, last) # indexed by last date of the week\njulia> show(ts_weekly[1:10])\n(10 x 1) TS with Date Index\n\n Index       x1_std\n Date        Float64\n────────────────────────\n 2017-01-01  NaN\n 2017-01-08    0.28935\n 2017-01-15    0.270842\n 2017-01-22    0.170197\n 2017-01-29    0.269573\n 2017-02-05    0.326687\n 2017-02-12    0.279935\n 2017-02-19    0.319216\n 2017-02-26    0.272058\n 2017-03-05    0.23651\n\n\n\n\n\n\n","category":"method"},{"location":"api/#TSx.describe-Tuple{IO, TS}","page":"API reference","title":"TSx.describe","text":"Summary statistics\n\ndescribe(ts::TS)\n\nCompute summary statistics of ts. The output is a DataFrame containing standard statistics along with number of missing values and data types of columns.\n\nExamples\n\njulia> using Random;\njulia> random(x) = rand(MersenneTwister(123), x...);\njulia> ts = TS(random(([1, 2, 3, 4, missing], 10)))\njulia> describe(ts)\n2×7 DataFrame\n Row │ variable  mean     min    median   max    nmissing  eltype\n     │ Symbol    Float64  Int64  Float64  Int64  Int64     Type\n─────┼───────────────────────────────────────────────────────────────────────────\n   1 │ Index        5.5       1      5.5     10         0  Int64\n   2 │ x1           2.75      2      3.0      4         2  Union{Missing, Int64}\n\n\n\n\n\n\n","category":"method"},{"location":"api/#TSx.head","page":"API reference","title":"TSx.head","text":"Head\n\nhead(ts::TS, n::Int = 10)\n\nReturns the first n rows of ts.\n\nExamples\n\njulia> head(TS(1:100))\n(10 x 1) TS with Int64 Index\n\n Index  x1\n Int64  Int64\n──────────────\n     1      1\n     2      2\n     3      3\n     4      4\n     5      5\n     6      6\n     7      7\n     8      8\n     9      9\n    10     10\n\n\n\n\n\n","category":"function"},{"location":"api/#TSx.index-Tuple{TS}","page":"API reference","title":"TSx.index","text":"Index column\n\nindex(ts::TS)\n\nReturn the index vector from the coredata DataFrame.\n\nExamples\n\njulia> using Random;\n\njulia> random(x) = rand(MersenneTwister(123), x);\n\njulia> ts = TS(random(10), Date(\"2022-02-01\"):Month(1):Date(\"2022-02-01\")+Month(9));\n\n\njulia> show(ts)\n(10 x 1) TS with Dates.Date Index\n\n Index       x1\n Date        Float64\n───────────────────────\n 2022-02-01  0.768448\n 2022-03-01  0.940515\n 2022-04-01  0.673959\n 2022-05-01  0.395453\n 2022-06-01  0.313244\n 2022-07-01  0.662555\n 2022-08-01  0.586022\n 2022-09-01  0.0521332\n 2022-10-01  0.26864\n 2022-11-01  0.108871\n\njulia> index(ts)\n10-element Vector{Date}:\n 2022-02-01\n 2022-03-01\n 2022-04-01\n 2022-05-01\n 2022-06-01\n 2022-07-01\n 2022-08-01\n 2022-09-01\n 2022-10-01\n 2022-11-01\n\njulia>  eltype(index(ts))\nDate\n\n\n\n\n\n","category":"method"},{"location":"api/#TSx.lag","page":"API reference","title":"TSx.lag","text":"Lagging\n\nlag(ts::TS, lag_value::Int = 1)\n\nLag the ts object by the specified lag_value. The rows corresponding to lagged values will be rendered as missing. Negative values of lag are also accepted (see TSx.lead).\n\nExamples\n\njulia> using Random, Statistics;\n\njulia> random(x) = rand(MersenneTwister(123), x);\n\njulia> dates = collect(Date(2017,1,1):Day(1):Date(2017,1,10));\n\njulia> ts = TS(random(length(dates)), dates);\njulia> show(ts)\n(10 x 1) TS with Dates.Date Index\n\n Index       x1\n Date        Float64\n───────────────────────\n 2017-01-01  0.768448\n 2017-01-02  0.940515\n 2017-01-03  0.673959\n 2017-01-04  0.395453\n 2017-01-05  0.313244\n 2017-01-06  0.662555\n 2017-01-07  0.586022\n 2017-01-08  0.0521332\n 2017-01-09  0.26864\n 2017-01-10  0.108871\n\n\njulia> lag(ts)\n(10 x 1) TS with Date Index\n\n Index       x1\n Date        Float64?\n─────────────────────────────\n 2017-01-01  missing\n 2017-01-02        0.768448\n 2017-01-03        0.940515\n 2017-01-04        0.673959\n 2017-01-05        0.395453\n 2017-01-06        0.313244\n 2017-01-07        0.662555\n 2017-01-08        0.586022\n 2017-01-09        0.0521332\n 2017-01-10        0.26864\n\njulia> lag(ts, 2) # lags by 2 values\n(10 x 1) TS with Date Index\n\n Index       x1\n Date        Float64?\n─────────────────────────────\n 2017-01-01  missing\n 2017-01-02  missing\n 2017-01-03        0.768448\n 2017-01-04        0.940515\n 2017-01-05        0.673959\n 2017-01-06        0.395453\n 2017-01-07        0.313244\n 2017-01-08        0.662555\n 2017-01-09        0.586022\n 2017-01-10        0.0521332\n\n\n\n\n\n\n","category":"function"},{"location":"api/#TSx.lead","page":"API reference","title":"TSx.lead","text":"Leading\n\nlead(ts::TS, lead_value::Int = 1)\n\nSimilar to lag, this method leads the ts object by lead_value. The lead rows are inserted with missing. Negative values of lead are also accepted (see TSx.lag).\n\nExamples\n\njulia> using Random, Statistics;\n\njulia> random(x) = rand(MersenneTwister(123), x);\n\njulia> dates = collect(Date(2017,1,1):Day(1):Date(2018,3,10));\n\njulia> ts = TS(DataFrame(Index = dates, x1 = random(length(dates))))\njulia> show(ts)\n(434 x 1) TS with Dates.Date Index\n\n Index       x1\n Date        Float64\n───────────────────────\n 2017-01-01  0.768448\n 2017-01-02  0.940515\n 2017-01-03  0.673959\n 2017-01-04  0.395453\n 2017-01-05  0.313244\n 2017-01-06  0.662555\n 2017-01-07  0.586022\n 2017-01-08  0.0521332\n     ⋮           ⋮\n 2018-03-03  0.127635\n 2018-03-04  0.147813\n 2018-03-05  0.873555\n 2018-03-06  0.486486\n 2018-03-07  0.495525\n 2018-03-08  0.64075\n 2018-03-09  0.375126\n 2018-03-10  0.0338698\n       418 rows omitted\n\n\njulia> lead(ts)[1:10]        # leads once\n(10 x 1) TS with Date Index\n\n Index       x1\n Date        Float64?\n───────────────────────\n 2017-01-01  0.940515\n 2017-01-02  0.673959\n 2017-01-03  0.395453\n 2017-01-04  0.313244\n 2017-01-05  0.662555\n 2017-01-06  0.586022\n 2017-01-07  0.0521332\n 2017-01-08  0.26864\n 2017-01-09  0.108871\n 2017-01-10  0.163666\n\njulia> lead(ts, 2)[1:10]     # leads by 2 values\n(10 x 1) TS with Date Index\n\n Index       x1\n Date        Float64?\n───────────────────────\n 2017-01-01  0.673959\n 2017-01-02  0.395453\n 2017-01-03  0.313244\n 2017-01-04  0.662555\n 2017-01-05  0.586022\n 2017-01-06  0.0521332\n 2017-01-07  0.26864\n 2017-01-08  0.108871\n 2017-01-09  0.163666\n 2017-01-10  0.473017\n\n\n\n\n\n\n","category":"function"},{"location":"api/#TSx.ncol-Tuple{TS}","page":"API reference","title":"TSx.ncol","text":"Size methods\n\nncol(ts::TS)\n\nReturn the number of columns of ts. nc is an alias for ncol.\n\nExamples\n\njulia> using Random;\n\njulia> random(x) = rand(MersenneTwister(123), x);\n\njulia> TSx.ncol(TS([random(100) random(100) random(100)]))\n3\n\njulia> nc(TS([random(100) random(100) random(100)]))\n3\n\n\n\n\n\n","category":"method"},{"location":"api/#TSx.nrow-Tuple{TS}","page":"API reference","title":"TSx.nrow","text":"Size methods\n\nnrow(ts::TS)\nnr(ts::TS)\n\nReturn the number of rows of ts. nr is an alias for nrow.\n\nExamples\n\njulia> ts = TS(collect(1:10))\njulia> TSx.nrow(ts)\n10\n\n\n\n\n\n","category":"method"},{"location":"api/#TSx.rollapply-Tuple{Function, TS, Any, Int64}","page":"API reference","title":"TSx.rollapply","text":"Rolling Functions\n\nrollapply(fun::Function, ts::TS, column::Any, windowsize::Int)\n\nApply a function to a column of ts for each continuous set of rows of size windowsize. column could be any of the DataFrame column selectors.\n\nThe output is a TS object with (nrow(ts) - windowsize + 1) rows indexed with the last index value of each window.\n\nThis method uses RollingFunctions package to implement this functionality.\n\nExamples\n\njulia> ts = TS(1:12, Date(\"2022-02-01\"):Month(1):Date(\"2022-02-01\")+Month(11))\n\njulia> show(ts)\n(12 x 1) TS with Dates.Date Index\n\n Index       x1\n Date        Int64\n───────────────────\n 2022-02-01      1\n 2022-03-01      2\n 2022-04-01      3\n 2022-05-01      4\n 2022-06-01      5\n 2022-07-01      6\n 2022-08-01      7\n 2022-09-01      8\n 2022-10-01      9\n 2022-11-01     10\n 2022-12-01     11\n 2023-01-01     12\n\njulia> rollapply(sum, ts, :x1, 10)\n(3 x 1) TS with Dates.Date Index\n\n Index       x1_rolling_sum\n Date        Float64\n────────────────────────────\n 2022-11-01            55.0\n 2022-12-01            65.0\n 2023-01-01            75.0\n\njulia> rollapply(Statistics.mean, ts, 1, 5)\n(8 x 1) TS with Dates.Date Index\n\n Index       x1_rolling_mean\n Date        Float64\n─────────────────────────────\n 2022-06-01              3.0\n 2022-07-01              4.0\n 2022-08-01              5.0\n 2022-09-01              6.0\n 2022-10-01              7.0\n 2022-11-01              8.0\n 2022-12-01              9.0\n 2023-01-01             10.0\n\n\n\n\n\n\n","category":"method"},{"location":"api/#TSx.subset-Union{Tuple{T}, Tuple{TS, T, T}} where T<:Union{Int64, Dates.TimeType}","page":"API reference","title":"TSx.subset","text":"Subsetting based on Index\n\nsubset(ts::TS, from::T, to::T) where {T<:Union{Int, TimeType}}\n\nCreate a subset of ts based on the Index starting from (inclusive) till to (inclusive).\n\nExamples\n\njulia> using Random;\njulia> random(x) = rand(MersenneTwister(123), x);\njulia> dates = Date(\"2022-02-01\"):Week(1):Date(\"2022-02-01\")+Month(9);\njulia> ts = TS(random(length(dates)), dates)\njulia> show(ts)\n(40 x 1) TS with Date Index\n\n Index       x1\n Date        Float64\n───────────────────────\n 2022-02-01  0.768448\n 2022-02-08  0.940515\n 2022-02-15  0.673959\n 2022-02-22  0.395453\n 2022-03-01  0.313244\n 2022-03-08  0.662555\n 2022-03-15  0.586022\n 2022-03-22  0.0521332\n 2022-03-29  0.26864\n 2022-04-05  0.108871\n 2022-04-12  0.163666\n 2022-04-19  0.473017\n 2022-04-26  0.865412\n 2022-05-03  0.617492\n 2022-05-10  0.285698\n 2022-05-17  0.463847\n 2022-05-24  0.275819\n 2022-05-31  0.446568\n 2022-06-07  0.582318\n 2022-06-14  0.255981\n 2022-06-21  0.70586\n 2022-06-28  0.291978\n 2022-07-05  0.281066\n 2022-07-12  0.792931\n 2022-07-19  0.20923\n 2022-07-26  0.918165\n 2022-08-02  0.614255\n 2022-08-09  0.802665\n 2022-08-16  0.555668\n 2022-08-23  0.940782\n 2022-08-30  0.48\n 2022-09-06  0.790201\n 2022-09-13  0.356221\n 2022-09-20  0.900925\n 2022-09-27  0.529253\n 2022-10-04  0.031831\n 2022-10-11  0.900681\n 2022-10-18  0.940299\n 2022-10-25  0.621379\n 2022-11-01  0.348173\n\njulia> subset(ts, Date(2022, 03), Date(2022, 07))\n(18 x 1) TS with Date Index\n\n Index       x1\n Date        Float64\n───────────────────────\n 2022-03-01  0.313244\n 2022-03-08  0.662555\n 2022-03-15  0.586022\n 2022-03-22  0.0521332\n 2022-03-29  0.26864\n 2022-04-05  0.108871\n 2022-04-12  0.163666\n 2022-04-19  0.473017\n 2022-04-26  0.865412\n 2022-05-03  0.617492\n 2022-05-10  0.285698\n 2022-05-17  0.463847\n 2022-05-24  0.275819\n 2022-05-31  0.446568\n 2022-06-07  0.582318\n 2022-06-14  0.255981\n 2022-06-21  0.70586\n 2022-06-28  0.291978\n\njulia> subset(TS(1:20, -9:10), -4, 5)\n(10 x 1) TS with Int64 Index\n\n Index  x1\n Int64  Int64\n──────────────\n    -4      6\n    -3      7\n    -2      8\n    -1      9\n     0     10\n     1     11\n     2     12\n     3     13\n     4     14\n     5     15\n\njulia> subset(ts,:,Date(\"2022-04-12\"))\n(11 x 1) TS with Date Index\n\n Index       x1        \n Date        Float64   \n───────────────────────\n 2022-02-01  0.768448\n 2022-02-08  0.940515\n 2022-02-15  0.673959\n 2022-02-22  0.395453\n 2022-03-01  0.313244\n 2022-03-08  0.662555\n 2022-03-15  0.586022\n 2022-03-22  0.0521332\n 2022-03-29  0.26864\n 2022-04-05  0.108871\n 2022-04-12  0.163666\n\njulia> subset(ts,Date(\"2022-9-27\"),:)\n(6 x 1) TS with Date Index\n\n Index       x1       \n Date        Float64  \n──────────────────────\n 2022-09-27  0.529253\n 2022-10-04  0.031831\n 2022-10-11  0.900681\n 2022-10-18  0.940299\n 2022-10-25  0.621379\n 2022-11-01  0.348173\n\n\n\n\n\n\n\n","category":"method"},{"location":"api/#TSx.tail","page":"API reference","title":"TSx.tail","text":"Tail\n\ntail(ts::TS, n::Int = 10)\n\nReturns the last n rows of ts.\n\njulia> tail(TS(1:100))\n(10 x 1) TS with Int64 Index\n\n Index  x1\n Int64  Int64\n──────────────\n    91     91\n    92     92\n    93     93\n    94     94\n    95     95\n    96     96\n    97     97\n    98     98\n    99     99\n   100    100\n\n\n\n\n\n","category":"function"},{"location":"user_guide/#User-guide","page":"User guide","title":"User guide","text":"","category":"section"},{"location":"user_guide/","page":"User guide","title":"User guide","text":"This page describes how to use the TSx package for timeseries data handling.","category":"page"},{"location":"user_guide/#Installation","page":"User guide","title":"Installation","text":"","category":"section"},{"location":"user_guide/","page":"User guide","title":"User guide","text":"julia> using Pkg\njulia> Pkg.add(url=\"https://github.com/xKDR/TSx.jl\")","category":"page"},{"location":"user_guide/#Constructing-TS-objects","page":"User guide","title":"Constructing TS objects","text":"","category":"section"},{"location":"user_guide/","page":"User guide","title":"User guide","text":"After installing TSx you need to load the package in Julia environment. Then, create a basic TS object.","category":"page"},{"location":"user_guide/","page":"User guide","title":"User guide","text":"julia> using TSx\n\njulia> ts = TS(1:10)\n(10 x 1) TS with Int64 Index\n\n Index  x1\n Int64  Int64\n──────────────\n     1      1\n     2      2\n     3      3\n     4      4\n     5      5\n     6      6\n     7      7\n     8      8\n     9      9\n    10     10\n\njulia> show(ts.coredata)\n10×2 DataFrame\n Row │ Index  x1\n     │ Int64  Int64\n─────┼──────────────\n   1 │     1      1\n   2 │     2      2\n   3 │     3      3\n   4 │     4      4\n   5 │     5      5\n   6 │     6      6\n   7 │     7      7\n   8 │     8      8\n   9 │     9      9\n  10 │    10     10\n","category":"page"},{"location":"user_guide/","page":"User guide","title":"User guide","text":"The basic TS constructor takes in a Vector of any type and automatically generates an index out of it (the Index column).","category":"page"},{"location":"user_guide/","page":"User guide","title":"User guide","text":"There are many ways to construct a TS object. For real world applications you would want to read in a CSV file or download a dataset as a DataFrame and then operate on it. You can easily convert a DataFrame to a TS object.","category":"page"},{"location":"user_guide/","page":"User guide","title":"User guide","text":"using CSV, DataFrames, TSx\n\nfilename = joinpath(dirname(pathof(TSx)),\n    \"..\", \"docs\", \"src\", \"assets\", \"sample_daily.csv\");\n\ndf = CSV.read(filename, DataFrame);\nshow(df)\n\nts = TS(df);\nshow(ts)","category":"page"},{"location":"user_guide/","page":"User guide","title":"User guide","text":"In the above example you load a CSV file bundled with TSx package, store it into a DataFrame df and then convert df into a TS object ts. The top line of the ts object tells you the number of rows (431 here) and the number of columns (1) along with the Type of Index (Dates.Date in the above example).","category":"page"},{"location":"user_guide/","page":"User guide","title":"User guide","text":"You can also fetch the number of rows and columns by using nr(ts), nc(ts), and size(ts) methods. Respectively, they fetch the number of rows, columns, and a Tuple of row and column numbers. A length(::TS) method is also provided for convenience which returns the number of rows of it's argument.","category":"page"},{"location":"user_guide/","page":"User guide","title":"User guide","text":"julia> nr(ts)\n431\n\njulia> nc(ts)\n1\n\njulia> size(ts)\n(431, 1)\n\njulia> length(ts)\n431\n","category":"page"},{"location":"user_guide/","page":"User guide","title":"User guide","text":"Names of data columns can be fetched using the names(ts) method which returns a Vector{String} object. The Index column can be fetched as an object of Vector type by using the index(ts) method, it can also be fetched directly using the underlying coredata property of TS: ts.coredata[!, :Index].","category":"page"},{"location":"user_guide/","page":"User guide","title":"User guide","text":"julia> names(ts)\n1-element Vector{String}:\n \"value\"\n\njulia> index(ts)\n431-element Vector{Date}:\n 2007-01-01\n 2007-01-02\n 2007-01-03\n 2007-01-04\n 2007-01-05\n 2007-01-06\n 2007-01-07\n 2007-01-08\n 2007-01-09\n 2007-01-10\n 2007-01-11\n ⋮\n 2008-02-25\n 2008-02-26\n 2008-02-27\n 2008-02-28\n 2008-02-29\n 2008-03-01\n 2008-03-02\n 2008-03-03\n 2008-03-04\n 2008-03-05\n 2008-03-06\n","category":"page"},{"location":"user_guide/","page":"User guide","title":"User guide","text":"Another simpler way to read a CSV directly into a TS object is by using pipes.","category":"page"},{"location":"user_guide/","page":"User guide","title":"User guide","text":"julia> ts = CSV.File(filename) |> DataFrame |> TS","category":"page"},{"location":"user_guide/#Indexing-and-subsetting","page":"User guide","title":"Indexing and subsetting","text":"","category":"section"},{"location":"user_guide/","page":"User guide","title":"User guide","text":"One of the primary features of a timeseries package is to provide ways to index or subset a dataset using convenient interfaces. TSx makes it easier to index a TS object by providing multiple intuitive getindex methods which work by just using the regular square parenthese ([ ]).","category":"page"},{"location":"user_guide/","page":"User guide","title":"User guide","text":"# first row\njulia> ts[1]\n(1 x 1) TS with Dates.Date Index\n\n Index       value\n Date        Float64\n─────────────────────\n 2007-01-01  10.1248\n\n\n# third & fifth row, and first column\njulia> ts[[3, 5], [1]]\n(2 x 1) TS with Date Index\n\n Index       value\n Date        Float64\n──────────────────────\n 2007-01-03   7.83777\n 2007-01-05  12.4548\n\n\n# first 10 rows and the first column as a vector\njulia> ts[1:10, 1]\n10-element Vector{Float64}:\n 10.1248338098958\n 10.3424091138411\n  7.83777413591419\n  9.87615632977506\n 12.4548084674329\n  8.63083527336206\n  8.67408599632254\n  9.75221297863206\n  8.76405813698277\n 10.8086548113129\n\n\n# using the column name\njulia> ts[1, [:value]]\n(1 x 1) TS with Dates.Date Index\n\n Index       value\n Date        Float64\n─────────────────────\n 2007-01-01  10.1248\n","category":"page"},{"location":"user_guide/","page":"User guide","title":"User guide","text":"Apart from integer-based row indexing and integer, name based column indexing, TSx provides special subsetting methods for date and time types defined inside the Dates module.","category":"page"},{"location":"user_guide/","page":"User guide","title":"User guide","text":"julia> using Dates\n\n# on January 10, 2007\njulia> ts[Date(2007, 1, 10)]\n(1 x 1) TS with Date Index\n\n Index       value\n Date        Float64\n─────────────────────\n 2007-01-10  10.8087\n\n# January 10, 11\njulia> ts[[Date(2007, 1, 10), Date(2007, 1, 11)]]\n(2 x 1) TS with Date Index\n\n Index       value\n Date        Float64\n──────────────────────\n 2007-01-10  10.8087\n 2007-01-11   9.74481\n\n\n# entire January 2007\njulia> ts[Year(2007), Month(1)]\n(31 x 1) TS with Date Index\n\n Index       value\n Date        Float64\n──────────────────────\n 2007-01-01  10.1248\n 2007-01-02  10.3424\n 2007-01-03   7.83777\n 2007-01-04   9.87616\n 2007-01-05  12.4548\n 2007-01-06   8.63084\n 2007-01-07   8.67409\n 2007-01-08   9.75221\n 2007-01-09   8.76406\n 2007-01-10  10.8087\n 2007-01-11   9.74481\n 2007-01-12  11.0995\n 2007-01-13   9.54143\n 2007-01-14  11.167\n 2007-01-15  10.144\n 2007-01-16  11.1019\n 2007-01-17  10.5315\n 2007-01-18  10.0811\n 2007-01-19  12.5888\n 2007-01-20  10.2757\n 2007-01-21  10.6202\n 2007-01-22  10.6328\n 2007-01-23  10.5008\n 2007-01-24   7.88032\n 2007-01-25   9.95546\n 2007-01-26   8.26072\n 2007-01-27   9.04647\n 2007-01-28   8.85252\n 2007-01-29   8.47322\n 2007-01-30  11.0956\n 2007-01-31  10.5902\n\njulia> ts[Year(2007), Quarter(2)];\n","category":"page"},{"location":"user_guide/#Summary-statistics","page":"User guide","title":"Summary statistics","text":"","category":"section"},{"location":"user_guide/","page":"User guide","title":"User guide","text":"The describe() method prints summary statistics of the TS object. The output is a DataFrame which includes the number of missing values, data types of columns along with computed statistical values.","category":"page"},{"location":"user_guide/","page":"User guide","title":"User guide","text":"julia> TSx.describe(ts)\n2×7 DataFrame\n Row │ variable  mean     min         median      max         nmissing  eltype\n     │ Symbol    Union…   Any         Any         Any         Int64     DataType\n─────┼───────────────────────────────────────────────────────────────────────────\n   1 │ Index              2007-01-01  2007-08-04  2008-03-06         0  Date\n   2 │ value     9.98177  7.83777     10.1248     12.5888            0  Float64\n","category":"page"},{"location":"user_guide/#Plotting","page":"User guide","title":"Plotting","text":"","category":"section"},{"location":"user_guide/","page":"User guide","title":"User guide","text":"A TS object can be plotted using the plot() function of the Plots package. The plotting functionality is provided by RecipesBase package so all the flexibility and functionality of the Plots package is available for users.","category":"page"},{"location":"user_guide/","page":"User guide","title":"User guide","text":"using Plots\nplot(ts, size=(600,400); legend=false)","category":"page"},{"location":"user_guide/#Applying-a-function-over-a-period","page":"User guide","title":"Applying a function over a period","text":"","category":"section"},{"location":"user_guide/","page":"User guide","title":"User guide","text":"The apply method allows you to aggregate the TS object over a period type (Dates.Period(@ref)) and return the output of applying the function on each period. For example, to convert frequency of daily timeseries to monthly you may use first(), last(), or Statistics.mean() functions and the period as Dates.Month.","category":"page"},{"location":"user_guide/","page":"User guide","title":"User guide","text":"julia> using Statistics\n\n# convert to monthly series using the last value for each month\njulia> ts_monthly = apply(ts, Month, last)\n(15 x 1) TS with Date Index\n\n Index       value_last\n Date        Float64\n────────────────────────\n 2007-01-01    10.5902\n 2007-02-01     8.85252\n 2007-03-01     8.85252\n 2007-04-01     9.04647\n 2007-05-01     9.04647\n 2007-06-01     8.26072\n 2007-07-01     8.26072\n 2007-08-01     8.26072\n 2007-09-01     9.95546\n 2007-10-01     9.95546\n 2007-11-01     7.88032\n 2007-12-01     7.88032\n 2008-01-01     7.88032\n 2008-02-01    10.6328\n 2008-03-01     8.85252\n\n\n# compute weekly standard deviation\njulia> ts_weekly = apply(ts, Week, Statistics.std)\n(62 x 1) TS with Date Index\n\n Index       value_std\n Date        Float64\n───────────────────────\n 2007-01-01   1.52077\n 2007-01-08   0.910942\n 2007-01-15   0.876362\n 2007-01-22   1.08075\n 2007-01-29   1.17684\n 2007-02-05   1.40065\n 2007-02-12   0.630415\n 2007-02-19   1.38134\n 2007-02-26   1.10601\n 2007-03-05   1.51014\n     ⋮           ⋮\n 2008-01-07   1.47589\n 2008-01-14   0.923073\n 2008-01-21   0.885798\n 2008-01-28   1.16116\n 2008-02-04   1.22311\n 2008-02-11   1.40016\n 2008-02-18   0.680589\n 2008-02-25   1.37616\n 2008-03-03   0.702384\n        43 rows omitted\n\n# same as above but index contains the last date of the week\njulia> apply(ts, Week, Statistics.std, last)\n(62 x 1) TS with Date Index\n\n Index       value_std\n Date        Float64\n───────────────────────\n 2007-01-07   1.52077\n 2007-01-14   0.910942\n 2007-01-21   0.876362\n 2007-01-28   1.08075\n 2007-02-04   1.17684\n 2007-02-11   1.40065\n 2007-02-18   0.630415\n 2007-02-25   1.38134\n 2007-03-04   1.10601\n 2007-03-11   1.51014\n     ⋮           ⋮\n 2008-01-13   1.47589\n 2008-01-20   0.923073\n 2008-01-27   0.885798\n 2008-02-03   1.16116\n 2008-02-10   1.22311\n 2008-02-17   1.40016\n 2008-02-24   0.680589\n 2008-03-02   1.37616\n 2008-03-06   0.702384\n        43 rows omitted\n\n# do not rename column\njulia> apply(ts, Week, Statistics.std, last, renamecols=false)\n(62 x 1) TS with Date Index\n\n Index       value\n Date        Float64\n──────────────────────\n 2007-01-07  1.52077\n 2007-01-14  0.910942\n 2007-01-21  0.876362\n 2007-01-28  1.08075\n 2007-02-04  1.17684\n 2007-02-11  1.40065\n 2007-02-18  0.630415\n 2007-02-25  1.38134\n 2007-03-04  1.10601\n 2007-03-11  1.51014\n     ⋮          ⋮\n 2008-01-13  1.47589\n 2008-01-20  0.923073\n 2008-01-27  0.885798\n 2008-02-03  1.16116\n 2008-02-10  1.22311\n 2008-02-17  1.40016\n 2008-02-24  0.680589\n 2008-03-02  1.37616\n 2008-03-06  0.702384\n       43 rows omitted\n","category":"page"},{"location":"user_guide/#Joins:-Row-and-column-binding-with-other-objects","page":"User guide","title":"Joins: Row and column binding with other objects","text":"","category":"section"},{"location":"user_guide/","page":"User guide","title":"User guide","text":"TSx provides methods to join two TS objects by columns: join (alias: cbind) or by rows: vcat (alias: rbind). Both the methods provide some basic intelligence while doing the merge.","category":"page"},{"location":"user_guide/","page":"User guide","title":"User guide","text":"join merges two datasets based on the Index values of both objects. Depending on the join strategy employed the final object may only contain index values only from the left object (using JoinLeft), the right object (using JoinRight), intersection of both objects (using JoinBoth), or a union of both objects (JoinAll) while inserting missing values where index values are missing from any of the other object.","category":"page"},{"location":"user_guide/","page":"User guide","title":"User guide","text":"julia> dates = collect(Date(2007,1,1):Day(1):Date(2007,1,30));\njulia> ts2 = TS(rand(length(dates)), dates)\n(30 x 1) TS with Date Index\n\n Index       x1\n Date        Float64\n───────────────────────\n 2007-01-01  0.125811\n 2007-01-02  0.06005\n 2007-01-03  0.324745\n 2007-01-04  0.873089\n 2007-01-05  0.781964\n 2007-01-06  0.570593\n 2007-01-07  0.770224\n 2007-01-08  0.295923\n 2007-01-09  0.363075\n 2007-01-10  0.985884\n     ⋮           ⋮\n 2007-01-22  0.222852\n 2007-01-23  0.818168\n 2007-01-24  0.718452\n 2007-01-25  0.863064\n 2007-01-26  0.0572773\n 2007-01-27  0.282689\n 2007-01-28  0.547679\n 2007-01-29  0.380771\n 2007-01-30  0.945756\n        11 rows omitted\n\n\n# cbind/join on Index column\njulia> join(ts, ts2, JoinAll)\n(431 x 2) TS with Date Index\n\n Index       value     x1\n Date        Float64?  Float64?\n──────────────────────────────────────\n 2007-01-01  10.1248         0.441924\n 2007-01-02  10.3424         0.140323\n 2007-01-03   7.83777        0.71753\n 2007-01-04   9.87616        0.762919\n 2007-01-05  12.4548         0.210845\n 2007-01-06   8.63084        0.3652\n 2007-01-07   8.67409        0.924636\n 2007-01-08   9.75221        0.864424\n 2007-01-09   8.76406        0.730909\n 2007-01-10  10.8087         0.985619\n     ⋮          ⋮            ⋮\n 2008-02-27  10.2757   missing\n 2008-02-28  10.6202   missing\n 2008-02-29  10.6328   missing\n 2008-03-01  10.5008   missing\n 2008-03-02   7.88032  missing\n 2008-03-03   9.95546  missing\n 2008-03-04   8.26072  missing\n 2008-03-05   9.04647  missing\n 2008-03-06   8.85252  missing\n                      412 rows omitted\n","category":"page"},{"location":"user_guide/","page":"User guide","title":"User guide","text":"vcat also works similarly but merges two datasets by rows. This method also uses certain strategies provided via colmerge argument to check for certain conditions before doing the merge, throwing an error if the conditions are not satisfied.","category":"page"},{"location":"user_guide/","page":"User guide","title":"User guide","text":"colmerge can be passed setequal which merges only if both objects have same column names, orderequal which merges only if both objects have same column names and columns are in the same order, intersect merges only the columns which are common to both objects, and union which merges even if the columns differ between the two objects, the resulting object has the columns filled with missing, if necessary.","category":"page"},{"location":"user_guide/","page":"User guide","title":"User guide","text":"For vcat, if the values of Index are same in the two objects then all the index values along with values in other columns are kept in the resulting object. So, a vcat operation may result in duplicate Index values and the results from other operations may differ or even throw unknown errors.","category":"page"},{"location":"user_guide/","page":"User guide","title":"User guide","text":"julia> dates = collect(Date(2008,4,1):Day(1):Date(2008,4,30));\njulia> ts3 = TS(DataFrame(values=rand(length(dates)), Index=dates))\n(30 x 1) TS with Date Index\n\n Index       values\n Date        Float64\n───────────────────────\n 2008-04-01  0.738621\n 2008-04-02  0.142737\n 2008-04-03  0.760334\n 2008-04-04  0.742455\n 2008-04-05  0.689045\n 2008-04-06  0.310307\n 2008-04-07  0.839686\n 2008-04-08  0.736732\n 2008-04-09  0.24704\n 2008-04-10  0.850607\n     ⋮           ⋮\n 2008-04-22  0.780828\n 2008-04-23  0.179\n 2008-04-24  0.226587\n 2008-04-25  0.710613\n 2008-04-26  0.507179\n 2008-04-27  0.761281\n 2008-04-28  0.0944633\n 2008-04-29  0.253298\n 2008-04-30  0.995585\n        11 rows omitted\n\n\n# do the merge\njulia> vcat(ts, ts3)\n(461 x 2) TS with Date Index\n\n Index       value          values\n Date        Float64?       Float64?\n────────────────────────────────────────────\n 2007-01-01       10.1248   missing\n 2007-01-02       10.3424   missing\n 2007-01-03        7.83777  missing\n 2007-01-04        9.87616  missing\n 2007-01-05       12.4548   missing\n 2007-01-06        8.63084  missing\n 2007-01-07        8.67409  missing\n 2007-01-08        9.75221  missing\n 2007-01-09        8.76406  missing\n 2007-01-10       10.8087   missing\n     ⋮             ⋮               ⋮\n 2008-04-22  missing              0.780828\n 2008-04-23  missing              0.179\n 2008-04-24  missing              0.226587\n 2008-04-25  missing              0.710613\n 2008-04-26  missing              0.507179\n 2008-04-27  missing              0.761281\n 2008-04-28  missing              0.0944633\n 2008-04-29  missing              0.253298\n 2008-04-30  missing              0.995585\n                            442 rows omitted\n","category":"page"},{"location":"user_guide/#Rolling-window-operations","page":"User guide","title":"Rolling window operations","text":"","category":"section"},{"location":"user_guide/","page":"User guide","title":"User guide","text":"The rollapply applies a function over a fixed-size rolling window on the dataset. In the example below, we compute the 10-day average of dataset values on a rolling basis.","category":"page"},{"location":"user_guide/","page":"User guide","title":"User guide","text":"julia> rollapply(Statistics.mean, ts, :value, 10)\n(422 x 1) TS with Date Index\n\n Index       value_rolling_mean\n Date        Float64\n────────────────────────────────\n 2007-01-10             9.72658\n 2007-01-11             9.68858\n 2007-01-12             9.76428\n 2007-01-13             9.93465\n 2007-01-14            10.0637\n 2007-01-15             9.83266\n 2007-01-16            10.0798\n 2007-01-17            10.2655\n 2007-01-18            10.2984\n 2007-01-19            10.6809\n     ⋮               ⋮\n 2008-02-27            10.6276\n 2008-02-28            10.7151\n 2008-02-29            10.6685\n 2008-03-01            10.7644\n 2008-03-02            10.4357\n 2008-03-03            10.4169\n 2008-03-04            10.1327\n 2008-03-05             9.98425\n 2008-03-06             9.86139\n                403 rows omitted\n","category":"page"},{"location":"user_guide/#Computing-rolling-difference-and-percent-change","page":"User guide","title":"Computing rolling difference and percent change","text":"","category":"section"},{"location":"user_guide/","page":"User guide","title":"User guide","text":"Similar to apply and rollapply there are specific methods to compute rolling differences and percent changes of a TS object. The diff method computes mathematical difference of values in adjacent rows, inserting missing in the first row. pctchange computes the percentage change between adjacent rows.","category":"page"},{"location":"user_guide/","page":"User guide","title":"User guide","text":"julia> diff(ts)\n^P(431 x 1) TS with Date Index\n\n Index       value\n Date        Float64?\n─────────────────────────────\n 2007-01-01  missing\n 2007-01-02        0.217575\n 2007-01-03       -2.50463\n 2007-01-04        2.03838\n 2007-01-05        2.57865\n 2007-01-06       -3.82397\n 2007-01-07        0.0432507\n 2007-01-08        1.07813\n 2007-01-09       -0.988155\n 2007-01-10        2.0446\n     ⋮              ⋮\n 2008-02-27       -2.31316\n 2008-02-28        0.344553\n 2008-02-29        0.0126078\n 2008-03-01       -0.131995\n 2008-03-02       -2.62052\n 2008-03-03        2.07514\n 2008-03-04       -1.69474\n 2008-03-05        0.785754\n 2008-03-06       -0.193954\n             412 rows omitted\n\n\njulia> pctchange(ts)\n(431 x 1) TS with Date Index\n\n Index       value\n Date        Float64?\n──────────────────────────────\n 2007-01-01  missing\n 2007-01-02        0.0214893\n 2007-01-03       -0.242171\n 2007-01-04        0.260072\n 2007-01-05        0.261099\n 2007-01-06       -0.307028\n 2007-01-07        0.00501119\n 2007-01-08        0.124293\n 2007-01-09       -0.101326\n 2007-01-10        0.233293\n     ⋮              ⋮\n 2008-02-27       -0.183747\n 2008-02-28        0.0335309\n 2008-02-29        0.00118715\n 2008-03-01       -0.0124139\n 2008-03-02       -0.249554\n 2008-03-03        0.263332\n 2008-03-04       -0.170232\n 2008-03-05        0.0951193\n 2008-03-06       -0.0214398\n              412 rows omitted\n","category":"page"},{"location":"user_guide/#Computing-log-of-data-values","page":"User guide","title":"Computing log of data values","text":"","category":"section"},{"location":"user_guide/","page":"User guide","title":"User guide","text":"The log method computes the log of each data value. The method throws an error if it encounters a negative number in the data. This method retains missing values in the resulting object if they were present in the input.","category":"page"},{"location":"user_guide/","page":"User guide","title":"User guide","text":"julia> log(ts)\n(431 x 1) TS with Date Index\n\n Index       value_log\n Date        Float64\n───────────────────────\n 2007-01-01    2.31499\n 2007-01-02    2.33625\n 2007-01-03    2.05895\n 2007-01-04    2.29012\n 2007-01-05    2.52211\n 2007-01-06    2.15534\n 2007-01-07    2.16034\n 2007-01-08    2.27749\n 2007-01-09    2.17066\n 2007-01-10    2.38035\n     ⋮           ⋮\n 2008-02-27    2.32978\n 2008-02-28    2.36276\n 2008-02-29    2.36395\n 2008-03-01    2.35146\n 2008-03-02    2.06437\n 2008-03-03    2.29812\n 2008-03-04    2.11151\n 2008-03-05    2.20238\n 2008-03-06    2.1807\n       412 rows omitted\n","category":"page"},{"location":"user_guide/#Creating-lagged/leading-series","page":"User guide","title":"Creating lagged/leading series","text":"","category":"section"},{"location":"user_guide/","page":"User guide","title":"User guide","text":"lag() and lead() provide ways to lag or lead a series respectively by a fixed value, inserting missing where required.","category":"page"},{"location":"user_guide/","page":"User guide","title":"User guide","text":"julia> lag(ts, 2)\n(431 x 1) TS with Date Index\n\n Index       value\n Date        Float64?\n───────────────────────────\n 2007-01-01  missing\n 2007-01-02  missing\n 2007-01-03       10.1248\n 2007-01-04       10.3424\n 2007-01-05        7.83777\n 2007-01-06        9.87616\n 2007-01-07       12.4548\n 2007-01-08        8.63084\n 2007-01-09        8.67409\n 2007-01-10        9.75221\n     ⋮             ⋮\n 2008-02-27       10.0811\n 2008-02-28       12.5888\n 2008-02-29       10.2757\n 2008-03-01       10.6202\n 2008-03-02       10.6328\n 2008-03-03       10.5008\n 2008-03-04        7.88032\n 2008-03-05        9.95546\n 2008-03-06        8.26072\n           412 rows omitted\n\n\njulia> lead(ts, 2)\n(431 x 1) TS with Date Index\n\n Index       value\n Date        Float64?\n───────────────────────────\n 2007-01-01        7.83777\n 2007-01-02        9.87616\n 2007-01-03       12.4548\n 2007-01-04        8.63084\n 2007-01-05        8.67409\n 2007-01-06        9.75221\n 2007-01-07        8.76406\n 2007-01-08       10.8087\n 2007-01-09        9.74481\n 2007-01-10       11.0995\n     ⋮             ⋮\n 2008-02-27       10.6328\n 2008-02-28       10.5008\n 2008-02-29        7.88032\n 2008-03-01        9.95546\n 2008-03-02        8.26072\n 2008-03-03        9.04647\n 2008-03-04        8.85252\n 2008-03-05  missing\n 2008-03-06  missing\n           412 rows omitted\n","category":"page"},{"location":"user_guide/#Converting-to-Matrix-and-DataFrame","page":"User guide","title":"Converting to Matrix and DataFrame","text":"","category":"section"},{"location":"user_guide/","page":"User guide","title":"User guide","text":"You can easily convert a TS object into a Matrix or fetch the DataFrame for doing operations which are outside of the TSx scope.","category":"page"},{"location":"user_guide/","page":"User guide","title":"User guide","text":"# convert column 1 to a vector of floats\njulia> ts[:, 1]\n431-element Vector{Float64}:\n 10.1248338098958\n 10.3424091138411\n  7.83777413591419\n  9.87615632977506\n 12.4548084674329\n  8.63083527336206\n  8.67408599632254\n  9.75221297863206\n  8.76405813698277\n 10.8086548113129\n  9.74480982888519\n  ⋮\n 10.0811113869023\n 12.5888345885963\n 10.2756782417694\n 10.6202311288555\n 10.6328389451372\n 10.5008434702989\n  7.88032001621439\n  9.95545794087256\n  8.2607203222573\n  9.04647411362002\n  8.85251977208324\n\n\n# convert entire TS into a Matrix\njulia> Matrix(ts)\n431×1 Matrix{Float64}:\n 10.1248338098958\n 10.3424091138411\n  7.83777413591419\n  9.87615632977506\n 12.4548084674329\n  8.63083527336206\n  8.67408599632254\n  9.75221297863206\n  8.76405813698277\n 10.8086548113129\n  9.74480982888519\n  ⋮\n 10.0811113869023\n 12.5888345885963\n 10.2756782417694\n 10.6202311288555\n 10.6328389451372\n 10.5008434702989\n  7.88032001621439\n  9.95545794087256\n  8.2607203222573\n  9.04647411362002\n  8.85251977208324\n\n\n# use the underlying DataFrame for other operations\njulia> select(ts.coredata, :Index, :value, DataFrames.nrow)\n431×3 DataFrame\n Row │ Index       value     nrow\n     │ Date        Float64   Int64\n─────┼─────────────────────────────\n   1 │ 2007-01-01  10.1248     431\n   2 │ 2007-01-02  10.3424     431\n   3 │ 2007-01-03   7.83777    431\n   4 │ 2007-01-04   9.87616    431\n   5 │ 2007-01-05  12.4548     431\n   6 │ 2007-01-06   8.63084    431\n   7 │ 2007-01-07   8.67409    431\n   8 │ 2007-01-08   9.75221    431\n   9 │ 2007-01-09   8.76406    431\n  10 │ 2007-01-10  10.8087     431\n  11 │ 2007-01-11   9.74481    431\n  12 │ 2007-01-12  11.0995     431\n  13 │ 2007-01-13   9.54143    431\n  14 │ 2007-01-14  11.167      431\n  ⋮  │     ⋮          ⋮        ⋮\n 418 │ 2008-02-22  10.144      431\n 419 │ 2008-02-23  11.1019     431\n 420 │ 2008-02-24  10.5315     431\n 421 │ 2008-02-25  10.0811     431\n 422 │ 2008-02-26  12.5888     431\n 423 │ 2008-02-27  10.2757     431\n 424 │ 2008-02-28  10.6202     431\n 425 │ 2008-02-29  10.6328     431\n 426 │ 2008-03-01  10.5008     431\n 427 │ 2008-03-02   7.88032    431\n 428 │ 2008-03-03   9.95546    431\n 429 │ 2008-03-04   8.26072    431\n 430 │ 2008-03-05   9.04647    431\n 431 │ 2008-03-06   8.85252    431\n                   403 rows omitted\n","category":"page"},{"location":"user_guide/#Writing-TS-into-a-CSV-file","page":"User guide","title":"Writing TS into a CSV file","text":"","category":"section"},{"location":"user_guide/","page":"User guide","title":"User guide","text":"Writing a TS object into a CSV file can be done easily by using the underlying coredata property. This DataFrame can be passed to the CSV.write method for writing into a file.","category":"page"},{"location":"user_guide/","page":"User guide","title":"User guide","text":"julia> ts.coredata |> CSV.write(\"/tmp/demo_ts.csv\");","category":"page"},{"location":"demo_finance/#Basic-demo-of-TSx-using-financial-data","page":"Basic demo of TSx","title":"Basic demo of TSx using financial data","text":"","category":"section"},{"location":"demo_finance/#Read-daily-prices-of-IBM-and-AAPL-stocks","page":"Basic demo of TSx","title":"Read daily prices of IBM and AAPL stocks","text":"","category":"section"},{"location":"demo_finance/","page":"Basic demo of TSx","title":"Basic demo of TSx","text":"As a first step, we read stock data of IBM and Apple for the past one year as a DataFrame then we will convert them to TS objects. The stock data files are bundled with the TSx package so there is no need to download them.","category":"page"},{"location":"demo_finance/","page":"Basic demo of TSx","title":"Basic demo of TSx","text":"using CSV, DataFrames, Dates, Plots, Statistics, TSx\n\nfilename_ibm = joinpath(dirname(pathof(TSx)),\n               \"..\", \"docs\", \"src\", \"assets\", \"IBM.csv\")\nfilename_aapl = joinpath(dirname(pathof(TSx)),\n               \"..\", \"docs\", \"src\", \"assets\", \"AAPL.csv\")\n\nibm_df = CSV.read(filename_ibm, DataFrame);\naapl_df = CSV.read(filename_aapl, DataFrame);\nnothing; # hide","category":"page"},{"location":"demo_finance/#Create-a-TS-object-for-IBM-historical-data","page":"Basic demo of TSx","title":"Create a TS object for IBM historical data","text":"","category":"section"},{"location":"demo_finance/","page":"Basic demo of TSx","title":"Basic demo of TSx","text":"Here, we convert the data frames into TS objects so that later we can use timeseries specific functions on them.","category":"page"},{"location":"demo_finance/","page":"Basic demo of TSx","title":"Basic demo of TSx","text":"ibm_ts = TS(ibm_df, :Date)\nshow(ibm_ts)","category":"page"},{"location":"demo_finance/#Create-TS-object-for-AAPL","page":"Basic demo of TSx","title":"Create TS object for AAPL","text":"","category":"section"},{"location":"demo_finance/","page":"Basic demo of TSx","title":"Basic demo of TSx","text":"aapl_ts = TS(aapl_df, :Date)\nshow(aapl_ts)","category":"page"},{"location":"demo_finance/#Create-a-6-month-subset-of-stock-data","page":"Basic demo of TSx","title":"Create a 6-month subset of stock data","text":"","category":"section"},{"location":"demo_finance/","page":"Basic demo of TSx","title":"Basic demo of TSx","text":"We would like to compare the stock returns for both the stocks for 6 months starting from June 1, 2021 till December 31, 2021. We use TSx.subset method to create new objects which contain the specified duration of data.","category":"page"},{"location":"demo_finance/","page":"Basic demo of TSx","title":"Basic demo of TSx","text":"date_from = Date(2021, 06, 01);\ndate_to = Date(2021, 12, 31);\n\nibm = TSx.subset(ibm_ts, date_from, date_to)\nshow(ibm)","category":"page"},{"location":"demo_finance/","page":"Basic demo of TSx","title":"Basic demo of TSx","text":"aapl = TSx.subset(aapl_ts, date_from, date_to)\nshow(aapl)","category":"page"},{"location":"demo_finance/#Combine-adjusted-closing-prices-of-both-stocks-into-one-object","page":"Basic demo of TSx","title":"Combine adjusted closing prices of both stocks into one object","text":"","category":"section"},{"location":"demo_finance/","page":"Basic demo of TSx","title":"Basic demo of TSx","text":"We now join (cbind) both the stocks' data into a single object for further analysis. We use TSx.join to create two columns containing adjusted closing prices of both the stocks. The join happens by comparing the Index values (dates) of the two objects. The resulting object contains two columns with exactly the same dates for which both the objects have data, all the other rows are omitted from the result.","category":"page"},{"location":"demo_finance/","page":"Basic demo of TSx","title":"Basic demo of TSx","text":"ibm_aapl = TSx.join(ibm[:, [\"Adj Close\"]], aapl[:, [\"Adj Close\"]], JoinBoth)\n    # rename the columns using DataFrame API (making sure `Index` is the first col)\nrename!(ibm_aapl.coredata, [:Index, :IBM, :AAPL])\nshow(ibm_aapl)","category":"page"},{"location":"demo_finance/","page":"Basic demo of TSx","title":"Basic demo of TSx","text":"After the join operation the column names are modified because we merged two same-named columns (Adj Close) so we use DataFrames.rename!() method to rename the columns to easily remembered stock names. This is made possible because ibm_appl.coredata is a DataFrame object internally.","category":"page"},{"location":"demo_finance/#Convert-data-into-weekly-frequency-using-last-values","page":"Basic demo of TSx","title":"Convert data into weekly frequency using last values","text":"","category":"section"},{"location":"demo_finance/","page":"Basic demo of TSx","title":"Basic demo of TSx","text":"Here, we convert daily stock data into weekly frequency by taking the value with which the trading closed on the last day of the week as the week's price.","category":"page"},{"location":"demo_finance/","page":"Basic demo of TSx","title":"Basic demo of TSx","text":"ibm_aapl_weekly = apply(ibm_aapl, Week, last, last)\nshow(ibm_aapl_weekly)","category":"page"},{"location":"demo_finance/#Compute-weekly-returns-using-the-familiar-log-and-diff-functions","page":"Basic demo of TSx","title":"Compute weekly returns using the familiar log and diff functions","text":"","category":"section"},{"location":"demo_finance/","page":"Basic demo of TSx","title":"Basic demo of TSx","text":"TSx has specialised functions for computing rolling differences and log of timeseries data. We use both of these to compute weekly log returns of both the stocks.","category":"page"},{"location":"demo_finance/","page":"Basic demo of TSx","title":"Basic demo of TSx","text":"ibm_aapl_weekly_returns = diff(log(ibm_aapl_weekly))\nrename!(ibm_aapl_weekly_returns.coredata, [:Index, :IBM, :AAPL])\nshow(ibm_aapl_weekly_returns)","category":"page"},{"location":"demo_finance/#Compute-standard-deviation-of-weekly-returns","page":"Basic demo of TSx","title":"Compute standard deviation of weekly returns","text":"","category":"section"},{"location":"demo_finance/","page":"Basic demo of TSx","title":"Basic demo of TSx","text":"Computing standard deviation is done using the std function from Statistics package. The skipmissing is used to skip missing values which may have been generated while computing log returns or were already present in the data.","category":"page"},{"location":"demo_finance/","page":"Basic demo of TSx","title":"Basic demo of TSx","text":"ibm_std = std(skipmissing(ibm_aapl_weekly_returns[:, :IBM]))\nprintln(\"Weekly standard deviation of IBM: \", ibm_std)","category":"page"},{"location":"demo_finance/","page":"Basic demo of TSx","title":"Basic demo of TSx","text":"aapl_std = std(skipmissing(ibm_aapl_weekly_returns[:, :AAPL]))\nprintln(\"Weekly standard deviation of AAPL: \", aapl_std)","category":"page"},{"location":"demo_finance/#Scatter-plot-of-AAPL-and-IBM","page":"Basic demo of TSx","title":"Scatter plot of AAPL and IBM","text":"","category":"section"},{"location":"demo_finance/","page":"Basic demo of TSx","title":"Basic demo of TSx","text":"Here, we use the Plots package to create a scatter plot with IBM weekly returns on the x-axis and Apple weekly returns on the y-axis.","category":"page"},{"location":"demo_finance/","page":"Basic demo of TSx","title":"Basic demo of TSx","text":"ENV[\"GKSwstype\"] = \"100\" # hide\nplot(ibm_aapl_weekly_returns[:, :AAPL],\n    ibm_aapl_weekly_returns[:, :IBM],\n    seriestype = :scatter;\n    xlabel = \"AAPL\",\n    ylabel = \"IBM\",\n    legend = false)\nsavefig(\"ts-plot.svg\"); nothing # hide","category":"page"},{"location":"demo_finance/","page":"Basic demo of TSx","title":"Basic demo of TSx","text":"(Image: )","category":"page"},{"location":"#TSx.jl","page":"Introduction","title":"TSx.jl","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"TSx provides a convenient interface for performing standard manipulations of timeseries data. The package uses DataFrame at it's core to allow powerful data manipulation functions while being lightweight. It is inspired by zoo and xts packages from the R world.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"TSx wraps a familiar syntax for timeseries operations over DataFrame type, thereby, providing the user with full set of DataFrame functionalities as well. Integrations with other packages in the Julia ecosystem which are supported by DataFrames.jl come to TSx at little cost.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"To start using TSx.jl take a look at the basic demo and then head to the User guide.","category":"page"},{"location":"#User-guide","page":"Introduction","title":"User guide","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Pages = [\"user_guide.md\"]","category":"page"},{"location":"#API-reference","page":"Introduction","title":"API reference","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Pages = [\"api.md\"]","category":"page"}]
}
